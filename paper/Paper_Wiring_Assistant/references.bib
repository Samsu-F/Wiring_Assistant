@misc{wiring_assistant_problem,
    key = {\url{https://db.cs.uni-tuebingen.de/staticfiles/ACM-problems/Wiring-Assistant.pdf}},
    note = {Accessed: 2024-08-17}
}

@misc{cppreference_qsort,
    key = {Cppreference},
    year = {2024},
    month = {January},
    day = {22},
    note = {\url{https://en.cppreference.com/w/c/algorithm/qsort}\\Accessed: 2024-08-14}
}

@misc{acm_icpc,
    key = {ICPC},
    year = {2024},
    month = {January},
    day = {22},
    note = {\url{https://icpc.global/}\\Accessed: 2024-09-10}
}

@techreport{isoiec_C99,
  title        = "{N1256}",
  author       = "ISO/IEC",
  institution  = "International Organization for Standardization and International Electrotechnical Commission",
  year         = {2007},
  month        = {September},
  day          = {7},
  type         = "Standard",
  number       = "ISO/IEC 9899:1999, TC3",
  note         = {\texttt{int\_fast32\_t}: §7.18.1.3, p.~256\\ \texttt{INT\_MAX}: §5.2.4.2.1, p.~22\\ \url{https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf}\\ Accessed: 2024-08-14}
}

@article{PEREIRA2021102609,
title = {Ranking programming languages by energy efficiency},
journal = {Science of Computer Programming},
volume = {205},
pages = {102609},
year = {2021},
issn = {0167-6423},
doi = {https://doi.org/10.1016/j.scico.2021.102609},
url = {https://www.sciencedirect.com/science/article/pii/S0167642321000022},
author = {Rui Pereira and Marco Couto and Francisco Ribeiro and Rui Rua and Jácome Cunha and João Paulo Fernandes and João Saraiva},
keywords = {Energy efficiency, Programming languages, Language benchmarking, Green software},
abstract = {This paper compares a large set of programming languages regarding their efficiency, including from an energetic point-of-view. Indeed, we seek to establish and analyze different rankings for programming languages based on their energy efficiency. The goal of being able to rank programming languages based on their energy efficiency is both recent, and certainly deserves further studies. We have taken rigorous and strict solutions to 10 well defined programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and configurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory efficiency of such solutions. Ultimately, it is based on such comparisons that we propose a series of efficiency rankings, based on single and multiple criteria. Our results show interesting findings, such as how slower/faster languages can consume less/more energy, and how memory usage influences energy consumption. We also present a simple way to use our results to provide software engineers and practitioners support in deciding which language to use when energy efficiency is a concern. In addition, we further validate our results and rankings against implementations from a chrestomathy program repository, Rosetta Code., by reproducing our methodology and benchmarking system. This allows us to understand how the results and conclusions from our rigorously and well defined benchmarked programs compare to those based on more representative and real-world implementations. Indeed our results show that the rankings do not change apart from one programming language.}
}

@inproceedings{10.1145/3125374.3125382,
author = {Couto, Marco and Pereira, Rui and Ribeiro, Francisco and Rua, Rui and Saraiva, Jo\~{a}o},
title = {Towards a Green Ranking for Programming Languages},
year = {2017},
isbn = {9781450353892},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3125374.3125382},
doi = {10.1145/3125374.3125382},
abstract = {While in the past the primary goal to optimize software was the run time optimization, nowadays there is a growing awareness of the need to reduce energy consumption. Additionally, a growing number of developers wish to become more energy-aware when programming and feel a lack of tools and the knowledge to do so.In this paper we define a ranking of energy efficiency in programming languages. We consider a set of computing problems implemented in ten well-known programming languages, and monitored the energy consumed when executing each language. Our preliminary results show that although the fastest languages tend to be the lowest consuming ones, there are other interesting cases where slower languages are more energy efficient than faster ones.},
booktitle = {Proceedings of the 21st Brazilian Symposium on Programming Languages},
articleno = {7},
numpages = {8},
keywords = {Programming Languages, Language Benchmarking, Green Software, Energy Efficiency},
location = {Fortaleza, CE, Brazil},
series = {SBLP '17}
}

﻿@Article{Fourment2008,
author={Fourment, Mathieu
and Gillings, Michael R.},
title={A comparison of common programming languages used in bioinformatics},
journal={BMC Bioinformatics},
year={2008},
month={Feb},
day={05},
volume={9},
number={1},
pages={82},
abstract={The performance of different programming languages has previously been benchmarked using abstract mathematical algorithms, but not using standard bioinformatics algorithms. We compared the memory usage and speed of execution for three standard bioinformatics methods, implemented in programs using one of six different programming languages. Programs for the Sellers algorithm, the Neighbor-Joining tree construction algorithm and an algorithm for parsing BLAST file outputs were implemented in C, C++, C{\#}, Java, Perl and Python.},
issn={1471-2105},
doi={10.1186/1471-2105-9-82},
url={https://doi.org/10.1186/1471-2105-9-82}
}

@misc{glibc,
  author       = {GNU Project},
  title        = {GNU C Library (glibc-2.40)},
  year         = {2024},
  version      = {2.40},
  howpublished = {\\Source code available at \url{https://ftp.gnu.org/gnu/glibc}},
}

