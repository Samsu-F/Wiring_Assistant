# Significant parts of this Makefile were generated by ChatGPT

# Compiler
CC = gcc

# Compiler flags
CFLAGS = -O3 -W -Wall -Wextra
PEDANTIC_FLAGS = -Werror -Wpedantic -Wshadow -Wcast-qual -Wstrict-prototypes -Wmissing-prototypes -Wswitch-default -Wcast-align=strict -Wbad-function-cast -Wstrict-overflow=4 -Winline -Wundef -Wnested-externs -Wunreachable-code -Wlogical-op -Wfloat-equal -Wredundant-decls -Wold-style-definition -Wwrite-strings -Wformat=2 -Wno-error=unused-parameter -Wno-error=inline -Wno-error=unreachable-code -fanalyzer



# Target executable
TARGET = build/wiring_assistant

# Source files
SRCS = a_star.c endpoint_repr.c graph.c pqueue.c wiring_assistant.c

# Object files
OBJS = $(addprefix build/,$(SRCS:.c=.o))

# Header files
HDRS = a_star.h endpoint_repr.h graph.h pqueue.h

# The name of theb build directory
BUILD_DIR = build



# Default target
all: $(TARGET)

# Ensure build directory exists
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Rule to link object files and create the executable
$(TARGET): $(OBJS)
	@echo Linking $(TARGET)
	@$(CC) $(CFLAGS) -o $(TARGET) $(OBJS)

# Rule to compile C source files into object files
$(BUILD_DIR)/%.o: %.c $(HDRS) | $(BUILD_DIR)
	@echo Compiling $<
	@$(CC) $(CFLAGS) -c $< -o $@

# Use pedantic flags to enforce quality standards
pedantic: CFLAGS += $(PEDANTIC_FLAGS)
pedantic: clean all

# Clean up the build files
clean:
	rm -rf $(OBJS) $(TARGET)
	@rmdir --ignore-fail-on-non-empty $(BUILD_DIR) 2>/dev/null || true

# Phony targets
.PHONY: all clean pedantic
